if (str_detect(tst, 'RELATORIO PRESTACAO DE CONTAS ANUAL'))
arq_corretos <- c(arq_corretos, arquivo)
}
diretorio <- list.files(path = indir)
arq_corretos <- character(0)
for (arquivo in diretorio) {
text <- pdf_text(paste0(indir, "/", arquivo))
tst <- prepara_texto(text, pag_final = 1)
if (str_detect(tst, 'RELATORIO PRESTACAO DE CONTAS ANUAL'))
arq_corretos <- c(arq_corretos, arquivo)
}
tst
diretorio
arquivo <- diretorio[1]
text <- pdf_text(paste0(indir, "/", arquivo))
tst <- prepara_texto(text, pag_final = 1)
tst
text
tst <- prepara_texto(text, pag_final = 1)
tst
tst <- prepara_texto(text, pag_final = 2)
tst
text
len(text)
length(text)
text[1]
texto_bruto <- text
texto_bruto <- text
pag_inicio <- 1
pag_final <- 1
if (pag_final == -1) {
pag_final <- length(texto_bruto)
}
texto_limpo <- str_c(texto_bruto[pag_inicio:pag_final], collapse = "#")
texto_limpo
texto_limpo <- iconv(texto_limpo, from = "UTF-8", to = "ASCII//TRANSLIT")
texto_limpo
iconv
txt
text
diretorio <- list.files(path = indir)
arq_corretos <- character(0)
for (arquivo in diretorio) {
text <- pdf_text(str_c(indir, "/", arquivo))
tst <- prepara_texto(text, pag_final = 1)
if (str_detect(tst, 'RELATORIO PRESTACAO DE CONTAS ANUAL'))
arq_corretos <- c(arq_corretos, arquivo)
}
arquivo <- diretorio[1]
text <- pdf_text(str_c(indir, "/", arquivo))
tst <- prepara_texto(text, pag_final = 1)
rsr
tst
arquivo
texto_bruto <- text
pag_inicio <- 1
pag_final <- 1
if (pag_final == -1) {
pag_final <- length(texto_bruto)
}
diretorio <- list.files(path = indir)
arq_corretos <- character(0)
for (arquivo in diretorio) {
text <- pdf_text(str_c(indir, "/", arquivo))
write(text, file = str_c(outdir, "/", arquivo))
}
diretorio <- list.files(path = indir)
arq_corretos <- character(0)
for (arquivo in diretorio) {
text <- pdf_text(str_c(indir, "/", arquivo))
write(text, file = str_c(outdir, "/", arquivo, ".pdf"))
}
diretorio <- list.files(path = indir)
arq_corretos <- character(0)
diretorio <- list.files(path = indir)
arq_corretos <- character(0)
for (arquivo in diretorio) {
text <- pdf_text(str_c(indir, "/", arquivo))
write(text, file = str_c(outdir, "/", arquivo, ".txt"))
}
text
cls
clear
cls
clc
text
texto_bruto <- text
pag_inicio <- 1
pag_final <- 1
if (pag_final == -1) {
pag_final <- length(texto_bruto)
}
texto_limpo <- str_c(texto_bruto[pag_inicio:pag_final], collapse = "#")
texto_limpo <- toupper(texto_limpo)
texto_limpo <- str_replace_all(texto_limpo, '[ ]{2,100}', '|')
texto_limpo
texto_limpo2 <- str_split(texto_limpo, '\r\n', simplify = FALSE)
texto_limpo2 == texto_limpo
texto_limpo <- str_split(texto_limpo, '\r\n', simplify = FALSE)
for (i in 1:length(texto_limpo[[1]])) {
texto_limpo[[1]][i] <- str_replace(texto_limpo[[1]][i], "^(#?[|]?)", "")
}
texto_limpo
str_replace("rychard", "^(#?[|]?)", "")
str_replace("rychard#?[|]?", "^(#?[|]?)", "")
str_replace("#?[|]?rychard#?[|]?", "^(#?[|]?)", "")
str_replace("#####rychard#?[|]?", "^(#?[|]?)", "")
str_replace("##rychard", "^(#?[|]?)", "")
str_replace("|rychard", "^(#?[|]?)", "")
iconv("rychard",from = "UTF-8", to = "ASCII//TRANSLIT")
iconv("rychard é massa",from = "UTF-8", to = "ASCII//TRANSLIT")
iconv("rychard não massa",from = "UTF-8", to = "ASCII//TRANSLIT")
library(pdftools)
library(stringr)
library(tm)
library(readxl)
library(dplyr)
library(tcepb)
iconv("rychard não massa",from = "UTF-8", to = "ASCII//TRANSLIT")
iconv("rychard não massa",from = "UTF-8", to = "ASCII")
iconv("rychard não massa",from = "UTF-8", to = "ASCII//TRANSLIT")
iconv("rychard não massa",from = "UTF-8", to = "ASCII/TRANSLIT")
iconv("rychard não massa",from = "UTF-8", to = "ASCII/TRANSLIT")
iconv("rychard não massa",from = "UTF-8", to = "ASCII//TRANSLIT")
iconv("rychard não massa",from = "latin1", to = "ASCII//TRANSLIT")
iconv("rychard não massa",from = "UTF-8", to = "latin1")
test <- iconv("rychard não massa",from = "UTF-8", to = "latin1")
iconv(test,from = "latin1", to = "ASCII//TRANSLIT")
?iconv
iconv(test, to = "ASCII//TRANSLIT")
text
test
iconv(test, to = "ASCII//TRANSLIT")
iconv(test, from = "latin1", to = "ASCII//TRANSLIT")
iconv(test, from = "UTF-8", to = "ASCII//TRANSLIT")
test
iconv("não", from = "UTF-8", to = "ASCII//TRANSLIT")
str_conv("não",  "ASCII//TRANSLIT")
?str_conv
stringi::stri_enc_list()
enconding <- stringi::stri_enc_list()
View(enconding)
Sys.getlocale()
stri_trans_general("não","Latin-ASCII")
library(stringi)
stri_trans_general("não","Latin-ASCII")
detach("package:stringi", unload=TRUE)
detach("package:stringi")
detach(stringi)
detach("stringi")
stri_trans_general("não","Latin-ASCII")
stringi::stri_trans_general("não","Latin-ASCII")
rm(list = ls())
options(scipen = 999)
indir <- '/Users/rychardnunesguedes/Dropbox/TCC_ITA/relatorios/dados_pdf/amostra/'
outdir <- '/Users/rychardnunesguedes/Dropbox/TCC_ITA/relatorios/dados_txt/amostra/'
specify_decimal <- function(x, k) trimws(format(round(x, k), nsmall=k))
#completa o vetor com NA para que atinja as 36 colunas e nao cause erro na execucao do codigo
CompletaVetorComNA <- function(vetor,tamanhoDesejado){
i <- length(vetor)
while(i <= (tamanhoDesejado-1)){
vetor <- c(vetor, NA)
i = i + 1
}
return(vetor)
}
prepara_texto <- function(texto_bruto, pag_inicio = 1, pag_final = -1){
if (pag_final == -1) {
pag_final <- length(texto_bruto)
}
texto_limpo <- str_c(texto_bruto[pag_inicio:pag_final], collapse = "#")
texto_limpo <- stringi::stri_trans_general(texto_limpo,"Latin-ASCII")
texto_limpo <- toupper(texto_limpo)
texto_limpo <- str_replace_all(texto_limpo, '[ ]{2,100}', '|')
texto_limpo <- str_split(texto_limpo, '\r\n', simplify = FALSE)
for (i in 1:length(texto_limpo[[1]])) {
texto_limpo[[1]][i] <- str_replace(texto_limpo[[1]][i], "^(#?[|]?)", "")
}
return(texto_limpo)
}
seleciona_trecho <- function(texto, rgx_inicio, rgx_final, folga = 0) {
inicio <- regexpr(rgx_inicio, texto)
fim <- inicio + regexpr(rgx_final, str_sub(texto, start = inicio)) + folga
trecho <- str_sub(texto, start = inicio, end = fim)
trecho <- str_split(trecho, pattern = '\", [\n]{0,1}\"')
return(trecho)
}
como_numero <- function(str){
num <- str_replace_all(str, "[.]", "")
num <- str_replace_all(num, "[,]", ".")
return(as.double(num))
}
## IDENTIFICAÇÃO DO PROCESSO/JURISDICIONADO
extracao_identificacao <- function(texto){
extraido <- character(0)
flag <- 0
for (i in texto[[1]]) {
if(str_detect(i, pattern = "PROCESSO N.")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
flag <- flag + 1
}
if(str_detect(i, pattern = "JURISDICIONADO")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
flag <- flag + 1
}
if(str_detect(i, pattern = "EXERCICIO")){
temp <- str_split(i, '[|]')[[1]][4]
extraido <- c(extraido, temp)
flag <- flag + 1
}
if (flag == 3)
break
}
return(extraido)
}
## EXECUÇÃO ORÇAMENTÁRIA
extracao_execucao_orcamentaria <- function(texto) {
flag <- 0
receita_arrecadada <- character(0)
despesa_executada <- character(0)
for (i in texto[[1]]) {
if(str_detect(i, pattern = "TOTAL[|]") && flag == 0){
receita_arrecadada <- str_split(i, '[|]')[[1]][2:6]
if (NA %in% receita_arrecadada ||
(is.na(as.numeric(receita_arrecadada[1])) || is.na(as.numeric(receita_arrecadada[2])) ||
is.na(as.numeric(receita_arrecadada[3])) || is.na(as.numeric(receita_arrecadada[4])) ||
is.na(as.numeric(receita_arrecadada[5])))) {
possibilidades <- str_split(i, '[| ]')[[1]]
cont <- 0
for (p in possibilidades){
temp <- str_replace_all(p, "[.]", "")
temp <- str_replace_all(temp, "[,]", ".")
if(!is.na(as.numeric(temp))) {
cont <- cont + 1
receita_arrecadada[cont] <- p
}
if (cont >= 5)
break
}
}
flag <- flag + 1
} else if(str_detect(i, pattern = "TOTAL") && flag == 1){
despesa_executada <- str_split(i, '[|]')[[1]][2:6]
if (NA %in% despesa_executada ||
(is.na(as.numeric(despesa_executada[1])) || is.na(as.numeric(despesa_executada[2])) ||
is.na(as.numeric(despesa_executada[3])) || is.na(as.numeric(despesa_executada[4])) ||
is.na(as.numeric(despesa_executada[5])))) {
possibilidades <- str_split(i, '[| ]')[[1]]
cont <- 0
for (p in possibilidades){
temp <- str_replace_all(p, "[.]", "")
temp <- str_replace_all(temp, "[,]", ".")
if(!is.na(as.numeric(temp))) {
cont <- cont + 1
despesa_executada[cont] <- p
}
if (cont >= 5)
break
}
}
break
}
}
return(list(receita_arrecadada, despesa_executada))
}
## RECEITA DE IMPOSTOS E TRANSFERÊNCIAS
extracao_rct_imp_trans <- function(texto) {
extraido <- character(0)
for (n in 1:length(texto[[1]])) { #for (i in texto[[1]]) {
i <- texto[[1]][n]
if(str_detect(i, pattern = "15. TOTAL DAS RECEITAS DE IMPOSTOS")){
extraido <- str_split(i, '[|]')[[1]][2:3]
# Caso não tenha o | entre o primeiro e segundo campo, buscar de outra forma
# Identifica o que é número e o que não é em um texto simples
if (is.na(extraido[2])){
temp1 <- str_split(i, '[|]')[[1]][1]
temp1 <- str_replace(string = temp1,
pattern = "^.{0,5}",
replacement = "")
temp1 <- str_extract(string = temp1,
pattern = "[0-9]{0,3}[.,]{0,1}[0-9]{0,3}[.,]{0,1}[0-9]{0,3}[.,]{0,1}[0-9]{0,3}[,.]{0,1}[0-9]{0,2}$")
temp2 <- str_split(i, '[|]')[[1]][2]
extraido <- c(temp1, temp2)
}
# Se ainda assim persistir o erro, pode que os números relacionados estejam na linha de baixo. Então, a busca é realizada na próxima linha.
if (NA %in% extraido) {
extraido[1:2] <- str_split(texto[[1]][n+1], '[|]')[[1]][1:2]
}
break
}
}
return(extraido)
}
## EDUCAÇÃO - FUNDEB
extracao_fundeb <- function(texto) {
extraido <- character(0)
for (i in texto[[1]]) {
if(str_detect(i, pattern = "TOTAL DAS RECEITAS [(]BASE DE CALCULO[)] [(]")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
else if(str_detect(i, pattern = "TOTAL DAS APLICACOES EM MAGISTERIO")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
else if(str_detect(i, pattern = "TOTAL DE OUTRAS DESPESAS")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
else if(str_detect(i, pattern = "PERCENTUAL DE APLICACAO EM MAGISTERIO")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
}
return(extraido)
}
## EDUCAÇÃO - MDE
extracao_mde <- function(texto) {
extraido <- character(0)
for (i in texto[[1]]) {
if(str_detect(i, pattern = "TOTAL DAS APLICACOES EM MDE")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
else if(str_detect(i, pattern = "TOTAL DAS RECEITAS DE IMPOSTOS E TRANSFERENCIAS")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
else if(str_detect(i, pattern = "PERCENTUAL DE APLICACAO EM MDE")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
}
return(extraido)
}
## SAÚDE
extracao_saude <- function(texto){
extraido <- character(0)
for (i in texto[[1]]) {
if(str_detect(i, pattern = "BASE DE CALCULO PARA AS ASPS")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
else if(str_detect(i, pattern = "DESPESAS EM ACOES E SERVICOS PUBLICOS DE SAUDE")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
else if(str_detect(i, pattern = "PERCENTUAL DE APLICACAO EM SAUDE")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
}
return(extraido)
}
## LEI DE RESPONSABILIDADE FISCAL
extracao_lrf <- function(texto) {
extraido <- character(0)
flag <- 0
for (n in 1:length(texto[[1]])) {
i <- texto[[1]][n]
if(str_detect(i, pattern = "TOTAL DAS DESPESA") && flag == 0){
texto_teste <- i
temp <- str_split(i, '[|]')[[1]][2:3]
extraido <- c(extraido, temp)
flag <- 1
# Se acontecer algum erro na leitura dos dados (o erro é identificado pela presença de NA), supõe-se incialmente que o erro tenha ocorrido por falta do | entre as colunas. Assim, a extração dos valores não pode ser realizada de forma direta com o str_split. Então, o que é feito é uma varredura em cada valor que esteja na mesma linha do identificador, retornando os valores que podem ser transformados em números. Como o padrão numérico do relatório é o brasileiro, utilizando "," como separador decimal e "." como separador de milhar, é necessário fazer algumas manipulações. Nesse caso, retorna apenas os dois primeiros números achados (já que o terceiro não é de interesse).
if (NA %in% extraido || (is.na(as.numeric(extraido[1])) || is.na(as.numeric(extraido[2]))) ) {
possibilidades <- str_split(texto[[1]][n], '[| ]')[[1]]
cont <- 0
for (p in possibilidades){
temp <- str_replace_all(p, "[.]", "")
temp <- str_replace_all(temp, "[,]", ".")
if(!is.na(as.numeric(temp))) {
cont <- cont + 1
extraido[cont] <- p
}
if (cont >= 2)
break
}
}
# Se ainda assim persistir o erro, pode ser que os números relacionados estejam na linha de baixo. Então, a busca é realizada na próxima linha.
if (NA %in% extraido) {
extraido[1:2] <- str_split(texto[[1]][n+1], '[|]')[[1]][1:2]
}
}
else if(str_detect(i, pattern = "TOTAL DAS DESPESAS DE PESSOAL DO ENTE") && flag == 1){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
flag <- 2
}
else if(str_detect(i, pattern = "TOTAL DAS DESPESAS DE PESSOAL DO ENTE INCLUSO") && flag == 2){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
flag <- 3
}
else if(str_detect(i, pattern = "[%] DA DESPESA COM PESSOAL")){
temp <- str_split(i, '[|]')[[1]][2:4]
extraido <- c(extraido, temp)
}
}
return(extraido)
}
## PREVIDÊNCIA
extracao_previdencia <- function(texto) {
extraido <- character(0)
for (i in texto[[1]]) {
if(str_detect(i, pattern = "OBRIGACOES PATRONAIS ESTIMADAS") ||
str_detect(i, pattern = "OBRIGACOES PATRONAIS DEVIDAS") ||
str_detect(i, pattern = "OBRIGACOES PATRONAIS A PAGAR")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
else if(str_detect(i, pattern = "OBRIGACOES PATRONAIS PAGAS")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
}
else if(str_detect(i, pattern = "VALOR NAO RECOLHIDO")){
temp <- str_split(i, '[|]')[[1]][2]
extraido <- c(extraido, temp)
break
}
}
return(extraido)
}
diretorio <- list.files(path = paste0(indir, "relatorios"))
arq_corretos <- character(0)
for (arquivo in diretorio) {
text <- pdf_text(paste0(indir, "relatorios\\", arquivo))
tst <- prepara_texto(text, pag_final = 1)
if (str_detect(tst, 'RELATORIO PRESTACAO DE CONTAS ANUAL'))
arq_corretos <- c(arq_corretos, arquivo)
}
arq_corretos
diretorio <- list.files(path = indir)
diretorio
arq_corretos <- character(0)
for (arquivo in diretorio) {
text <- pdf_text(paste0(indir, "relatorios\\", arquivo))
tst <- prepara_texto(text, pag_final = 1)
if (str_detect(tst, 'RELATORIO PRESTACAO DE CONTAS ANUAL'))
arq_corretos <- c(arq_corretos, arquivo)
}
diretorio
arquivo <- diretorio[1]
text <- pdf_text(paste0(indir, "relatorios\\", arquivo))
arquivo <- diretorio[1]
text <- pdf_text(paste0(indir, arquivo))
tst <- prepara_texto(text, pag_final = 1)
tst
if (str_detect(tst, 'RELATORIO PRESTACAO DE CONTAS ANUAL'))
arq_corretos <- c(arq_corretos, arquivo)
arq_corretos <- character(0)
for (arquivo in diretorio) {
text <- pdf_text(paste0(indir, arquivo))
tst <- prepara_texto(text, pag_final = 1)
if (str_detect(tst, 'RELATORIO PRESTACAO DE CONTAS ANUAL'))
arq_corretos <- c(arq_corretos, arquivo)
}
for (arquivo in diretorio) {
text <- pdf_text(paste0(indir, arquivo))
tst <- prepara_texto(text, pag_final = 1)
if (str_detect(tst, 'RELATORIO PRESTACAO DE CONTAS ANUAL'))
arq_corretos <- c(arq_corretos, arquivo)
}
diretorio
arq_corretos
tst
for (arquivo in diretorio) {
text <- pdf_text(paste0(indir, arquivo))
tst <- prepara_texto(text, pag_final = 1)
if (str_detect(tst, 'RELATORIO DE ACOMPANHAMENTO DA GESTAO MUNICIPAL'))
arq_corretos <- c(arq_corretos, arquivo)
}
arq_corretos
diretorio <- list.files(path = indir)
diretorio
diretorio <- list.files(path = indir)
for (arquivo in diretorio) {
text <- pdf_text(str_c(indir, arquivo))
write(text, file = str_c(outdir, arquivo, ".txt"))
}
arquivo <- arq_corretos[1]
arquivo
texto <- pdf_text(paste0(indir, "relatorios\\", arquivo))
texto <- pdf_text(paste0(indir, arquivo))
texto
texto <- prepara_texto(texto_bruto = texto)
texto
arquivo <- arq_corretos[1]
texto <- pdf_text(paste0(indir, arquivo))
texto <- prepara_texto(texto_bruto = texto)
texto
### Execução orçamentária
trecho <- seleciona_trecho(texto, "5. EXECUCAO ORCAMENTARIA", "FONTE")
trecho
### Receitas de Impostos e Transferências
tst <- seleciona_trecho(texto, "RECEITA DE IMPOSTOS E TRANSFERENCIAS", "FONTE")
tst
setwd("/Users/rychardnunesguedes/Projects/cd")
write.csv("iris.csv", iris)
iris
write.csv("iris.csv", iris)
getwd()
write.csv("iris.csv", iris)
rm(lists = ls())
rm(list = ls())
iris
write.csv("iris.csv", iris)
?write.csv()
write.csv(iris, "iris.csv")
